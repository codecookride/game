{"version":3,"sources":["index.js"],"names":["Game","state","cells","isRunning","interval","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","x","offsetY","clientY","y","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyBoard","handleRandom","random","HEIGHT","WIDTH","this","rect","boardRef","getBoundingClientRect","doc","document","documentElement","left","pageXOffset","clientLeft","top","pageYOffset","clientTop","push","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","className","style","width","height","backgroundSize","onClick","ref","n","map","cell","Cell","key","onChange","React","Component","props","CELL_SIZE","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d9e8fa68.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n\n\nconst CELL_SIZE = 10;\nconst WIDTH = 1600;\nconst HEIGHT = 800;\n\n\n// class Cell extends React.Component {\n   \n   \n//     render() {\n        \n        \n        \n//         const { x, y } = this.props;\n       \n//         if (y > x) {\n        \n//         return (\n//             <div className=\"Cellg\" style={{\n//                 left: `${CELL_SIZE * x + 2}px`,\n//                 top: `${CELL_SIZE * y + 2}px`,\n//                 width: `${CELL_SIZE - 2}px`,\n//                 height: `${CELL_SIZE - 2}px`,\n//             }} />\n//         );\n//         }\n//         else {\n//             return(\n//                 <div className=\"Cell\" style={{\n//                     left: `${CELL_SIZE * x + 1}px`,\n//                     top: `${CELL_SIZE * y + 1}px`,\n//                     width: `${CELL_SIZE - 1}px`,\n//                     height: `${CELL_SIZE - 1}px`,\n//                 }} />\n//             )\n//         }\n//     }\n// }\n\n\nclass Game extends React.Component {\n\n    constructor() {\n        super();\n        this.rows = HEIGHT / CELL_SIZE;\n        this.cols = WIDTH / CELL_SIZE;\n\n        this.board = this.makeEmptyBoard();\n    }\n\n    state = {\n        cells: [],\n        isRunning: false,\n        interval: 100,\n    }\n\n    makeEmptyBoard() {\n        let board = [];\n        for (let y = 0; y < this.rows; y++) {\n            board[y] = [];\n            for (let x = 0; x < this.cols; x++) {\n                board[y][x] = false;\n            }\n        }\n\n        return board;\n    }\n\n    getElementOffset() {\n        const rect = this.boardRef.getBoundingClientRect();\n        const doc = document.documentElement;\n\n        return {\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\n            y: (rect.top + window.pageYOffset) - doc.clientTop,\n        };\n    }\n\n    makeCells() {\n        let cells = [];\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                if (this.board[y][x]) {\n                    cells.push({ x, y });\n                }\n            }\n        }\n\n        return cells;\n    }\n\n    handleClick = (event) => {\n\n        const elemOffset = this.getElementOffset();\n        const offsetX = event.clientX - elemOffset.x;\n        const offsetY = event.clientY - elemOffset.y;\n        \n        const x = Math.floor(offsetX / CELL_SIZE);\n        const y = Math.floor(offsetY / CELL_SIZE);\n\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n            this.board[y][x] = !this.board[y][x];\n        }\n\n        this.setState({ cells: this.makeCells() });\n    }\n\n    runGame = () => {\n        this.setState({ isRunning: true });\n        this.runIteration();\n    }\n\n    stopGame = () => {\n        this.setState({ isRunning: false });\n        if (this.timeoutHandler) {\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n        }\n    }\n\n    runIteration() {\n        let newBoard = this.makeEmptyBoard();\n\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                let neighbors = this.calculateNeighbors(this.board, x, y);\n               if (this.board[y][x]) {\n                    if (  neighbors > 2 && neighbors < 5 ) {\n                    newBoard[y][x] = true;\n                } else {\n                newBoard[y][x] = false;\n                }\n                } else {\n                if (!this.board[y][x] && (neighbors === 3)) {\n                 newBoard[y][x] = true;\n                }\n            }\n        }\n    }\n        this.board = newBoard;\n        this.setState({ cells: this.makeCells() });\n\n        this.timeoutHandler = window.setTimeout(() => {\n            this.runIteration();\n        }, this.state.interval);\n    }\n\n    /**\n     * Calculate the number of neighbors at point (x, y)\n     * @param {Array} board \n     * @param {int} x \n     * @param {int} y \n     */\n    calculateNeighbors(board, x, y) {\n        let neighbors = 0;\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1],[1,1],  [1, -1], [0, -1], [-1,2],[0,0],[-1,-2]];\n        \n        \n        for (let i = 0; i < dirs.length; i++) {\n            const dir = dirs[i];\n            let y1 = y + dir[0];\n            let x1 = x + dir[1];\n\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\n                neighbors++;\n            }\n        }\n\n        return neighbors;\n    }\n\n    handleIntervalChange = (event) => {\n        this.setState({ interval: event.target.value });\n    }\n\n    handleClear = () => {\n        this.board = this.makeEmptyBoard();\n        this.setState({ cells: this.makeCells() });\n    }\n\n    handleRandom = () => {\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                this.board[y][x] = (Math.random() >= 0.5);\n            }\n        }\n\n        this.setState({ cells: this.makeCells() });\n    }\n\n    render() {\n\n        \n        const { cells, interval, isRunning } = this.state;\n        return (\n            <div>\n                <div className=\"Board\"\n                    style={{ width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\n                    onClick={this.handleClick}\n                    ref={(n) => { this.boardRef = n; }}>\n\n                    {cells.map(cell => (\n                         \n                        <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/>\n                    ))}\n                </div>\n\n                <div className=\"controls\">\n                    <p>Update every <input value={this.state.interval} onChange={this.handleIntervalChange} /> msec</p>\n                    {isRunning ?\n                        <button className=\"button\" onClick={this.stopGame}>Stop</button> :\n                        <button className=\"button\" onClick={this.runGame}>Run</button>\n                    }\n                    <button className=\"button\" onClick={this.handleRandom}>Random</button>\n                    <button className=\"button\" onClick={this.handleClear}>Clear</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Cell extends React.Component {\n \n   \n    render() {\n        \n      \n  \n        const { x, y } = this.props;\n      \n        if (((Math.floor(Math.random() * 100) >= y))&&(y<40)) {\n        \n        return (\n            <div className=\"Cellg\" style={{\n                left: `${CELL_SIZE * x + 1}px`,\n                top: `${CELL_SIZE * y + 1}px`,\n                width: `${CELL_SIZE - 1}px`,\n                height: `${CELL_SIZE - 1}px`,\n            }} />\n        );\n        }\n        else if(((Math.floor(Math.random() * 100) <= y))&&(y>40)) {\n        \n            return (\n                <div className=\"Cellc\" style={{\n                    left: `${CELL_SIZE * x + 1}px`,\n                    top: `${CELL_SIZE * y + 1}px`,\n                    width: `${CELL_SIZE - 1}px`,\n                    height: `${CELL_SIZE - 1}px`,\n                }} />\n            );\n\n        }\n        else if(((Math.floor(Math.random() * 100) >= y))&&(y>20 && y<60)) {\n\n            return (\n                <div className=\"Celld\" style={{\n                    left: `${CELL_SIZE * x + 1}px`,\n                    top: `${CELL_SIZE * y + 1}px`,\n                    width: `${CELL_SIZE - 1}px`,\n                    height: `${CELL_SIZE - 1}px`,\n                }} />\n            );\n\n        }\n        else {\n            return(\n                <div className=\"Cell\" style={{\n                    left: `${CELL_SIZE * x + 1}px`,\n                    top: `${CELL_SIZE * y + 1}px`,\n                    width: `${CELL_SIZE - 1}px`,\n                    height: `${CELL_SIZE - 1}px`,\n                }} />\n            )\n        }\n    }\n}\n\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n\n\n\n\n// FIRE Breather\n\n// const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1],  [1, 0], [1, -1], [0, -1], [-1,2],[-2,3],[-1,3]];\n\n// if (this.board[y][x]) {\n//     if (  neighbors === 3 || neighbors === 2) {\n//         newBoard[y][x] = true;\n//     } else {\n//         newBoard[y][x] = false;\n//     }\n// } else {\n//     if (!this.board[y][x] && (neighbors === 3|| neighbors === 4)) {\n//         newBoard[y][x] = true;\n//     }\n\n\n// MAZE MOUNTAIN!\n\n// if (this.board[y][x]) {\n//     if (  neighbors > 2 && neighbors < 7 ) {\n//         newBoard[y][x] = true;\n//     } else {\n//         newBoard[y][x] = false;\n//     }\n// } else {\n//     if (!this.board[y][x] && (neighbors === 3)) {\n//         newBoard[y][x] = true;\n//     }\n// }\n\n// WILD SHIP FIGHT!\n\n// [[-1, -1], [-1, 0], [-1, 1], [0, 1],[1,1],  [1, -1], [0, -1], [-1,2],[0,0],[-1,-2]]\n\n// if (this.board[y][x]) {\n//     if (  neighbors > 2 && neighbors < 5 ) {\n//         newBoard[y][x] = true;\n//     } else {\n//         newBoard[y][x] = false;\n//     }\n// } else {\n//     if (!this.board[y][x] && (neighbors === 3)) {\n//         newBoard[y][x] = true;\n//     }\n\n\n// RUNNING NAMOEBA!\n\n// if (this.board[y][x]) {\n//     if (  neighbors > 2 && neighbors < 7 && neighbors !==5 ) {\n//         newBoard[y][x] = true;\n//     } else {\n//         newBoard[y][x] = false;\n//     }\n// } else {\n//     if (!this.board[y][x] && (neighbors === 3  || neighbors===5)) {\n//         newBoard[y][x] = true;\n//     }\n// }"],"sourceRoot":""}